// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  role Role @default(Guest)
  password String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accounts Account[]
  questions Question[]
  answers Answer[]
  comments Comment[]
  notifications Notification[]
}
enum Role{
  Guest
  User
  Admin
}
enum accnrole{
  Admin
  User
}
model Account{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  role accnrole @default(User)
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int? 
  token_type String? 
scope String?
id_token String? @db.String
session_state String?
user User @relation(fields:[userId],references: [id],onDelete:Cascade)
@@unique([provider, providerAccountId])
}
model VerificationToken{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  token String @unique
  expiresAt DateTime
}
model Question{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  question String 
  answercount Int @default(0)
  tagids String[] @db.ObjectId @default([])
  tags Tags[] @relation("Tags",fields:[tagids],references:[id])
  description String
  Answers Answer[]
  userId String @db.ObjectId
  user User @relation(fields:[userId],references: [id],onDelete:Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Tags{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  questionids String[] @db.ObjectId
  questions Question[] @relation("Tags",fields:[questionids],references:[id])
}

model Answer{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  answer String
  questionId String @db.ObjectId
  question Question @relation(fields:[questionId],references:[id],onDelete:Cascade)
  userId String @db.ObjectId
  user User @relation(fields:[userId],references:[id],onDelete:Cascade)
  upvoted Int @default(0)
  downvoted Int @default(0)
  voters String[] @db.ObjectId @default([])
  votecount Int @default(0)
  votes Int @default(0)
  comments Comment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Comment{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  comment String
  answerId String @db.ObjectId
  answer Answer @relation(fields:[answerId],references:[id],onDelete:Cascade)
  userId String @db.ObjectId
  user User @relation(fields:[userId],references:[id],onDelete:Cascade)
  upvoted Int @default(0)
  downvoted Int @default(0)
  voters String[] @db.ObjectId @default([])
  votecount Int @default(0)
  votes Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  type String
  userId String @db.ObjectId
  user User @relation(fields:[userId],references:[id],onDelete:Cascade)
  message String
  questionId String @db.ObjectId
  answerId String @db.ObjectId
  commentId String? @db.ObjectId
  read Boolean @default(false)
  createdAt DateTime @default(now())
  @@index([userId])
}